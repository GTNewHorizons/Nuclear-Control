buildscript {
    repositories {
        mavenCentral ()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath "com.github.GTNewHorizons:ForgeGradle:1.2.4"
    }
}

plugins {
    id 'idea'
    id 'scala'
    id("org.ajoberstar.grgit") version("3.1.1")
    id("com.github.johnrengelman.shadow") version("4.0.4")
    id("com.palantir.git-version") version("0.12.3")
}

apply plugin: 'forge'

repositories {
    mavenCentral ()
    maven {
        name "ic2"
        url "https://maven.ic2.player.to"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        name "chickenbones"
        url "https://chickenbones.net/maven"
    }
    maven {
        name "OC"
        url "http://maven.cil.li"
    }
    maven {
        name "Overmind forge repo mirror"
        url "https://gregtech.overminddl1.com"
    }
    maven {
        name "jitpack"
        url "https://jitpack.io"
    }
}

group = "com.shedar.IC2NuclearControl"
archivesBaseName = "IC2NuclearControl"

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    compile "net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev"
    implementation "li.cil.oc:OpenComputers:MC1.7.10-1.7.0.1094:dev"
    compileOnly('net.sourceforge.argo:argo:6.0')
    compile "com.github.GTNewHorizons:CodeChickenLib:master-SNAPSHOT:dev"
    compile "com.github.GTNewHorizons:CodeChickenCore:master-SNAPSHOT:dev"
    compile "com.github.GTNewHorizons:NotEnoughItems:master-SNAPSHOT:dev"
    implementation 'com.github.GTNewHorizons:waila:master-SNAPSHOT'
    compile "cofh:CoFHCore:1.7.10R3.0.4:dev"
    compile("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-1.7.10-SNAPSHOT:dev") {
        setChanging(true)
        transitive = false
    }
    compile "com.mod-buildcraft:buildcraft:7.1.23:dev"
    compile("com.github.GTNewHorizons:GT5-Unofficial:experimental-SNAPSHOT:dev") {
        setChanging(true)
        transitive = false
    }
}

version =  "${project.config.mod_version}" ?: "1"

println  config.mc_version + "-" + config.forge_version
// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {
    version = config.mc_version + "-" + config.forge_version + "-" + config.mc_version
}

def root = project.projectDir.parentFile
sourceSets {
    main {
        java {
            srcDir new File(root, "src")
        }
        resources {
            srcDir new File(root, "resources")
        }
    }
}

processResources {
    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc_version", config.mc_version

    // Replace properties in info files
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'version':project.version,'mc_version':config.mc_version
    }
    // Copy everything else
    from(sourceSets.main.resources.srcDirs) {
        include 'assets/**/*.*'
    }
}

version = "${project.minecraft.version}-${project.version}"

jar {

}


task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task devJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('dev')
}

task libJar(type: Jar) {
    from(sourceSets.main.java) {
        include "shedar/mods/ic2/nuclearcontrol/api/**/*"
    }
    archiveClassifier.set('api')
}

// Tell the artifact system about our extra jars
artifacts {
    archives sourceJar, devJar
}